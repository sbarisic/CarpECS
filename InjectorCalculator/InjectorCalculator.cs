using System;
using System.Numerics;
using Raylib_cs;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using static Raylib_cs.Raylib;
using System.Diagnostics;

namespace InjectorCalculator {
	static class Program {
		const int W = 1600;
		const int H = 1000;

		static Vector2 Origin;
		static Font TxtFnt;

		static RaylibGrid Grid;

		static void Main(string[] args) {
			SetConfigFlags(ConfigFlags.FLAG_MSAA_4X_HINT);
			SetConfigFlags(ConfigFlags.FLAG_WINDOW_HIGHDPI);
			InitWindow(W, H, "Injector Calculator");
			SetTargetFPS(30);

			Origin = new Vector2(50, 50);

			TxtFnt = LoadFont("consola.ttf");
			TxtFnt.baseSize = 36;
			SetTextureFilter(TxtFnt.texture, TextureFilter.TEXTURE_FILTER_BILINEAR);

			Grid = new RaylibGrid(new Vector2(60, 50), new Vector2(W - 100, H - 100), W, H);
			Grid.SetAxis("PWidth [ms]", "Flow", new Vector2(5, 0.03f), new Vector2(0.25f, 0.001f));
			Grid.SetFont(TxtFnt);

			LoadData();

			float MS = CalcPW(0.076f, 14.7f, out float MSIdeal);
			Console.WriteLine("{0} ms; {1} ideal ms", MS, MSIdeal);

			CSVPoint[] Points = HPTCSV.ParseEntriesHPT("test1.csv");

			while (!WindowShouldClose())    // Detect window close button or ESC key
			{
				BeginDrawing();
				ClearBackground(Color.BLACK);
				Grid.Draw();
				Draw();


				/*for (int i = 0; i < Points.Length; i++) {
					CSVPoint Pt = Points[i];

					float Stoich = 14.1298828125f;
					float AFRFromEQ = (Points[i].EQ / 14.7f) * Stoich;
					float Trim = ((Points[i].LTFT + Points[i].STFT) / 100);

					AFRFromEQ = AFRFromEQ - (AFRFromEQ * Trim);



					Grid.PlotPixel(new Vector2(Points[i].InjMS, Points[i].CylAirmass / AFRFromEQ), Color.BLUE);
				}*/


				EndDrawing();

				Vector2 MousePos = GetMousePosition();
				MousePos = new Vector2(MousePos.X, H - MousePos.Y);


				//bool Left = IsMouseButtonPressed(MouseButton.MOUSE_BUTTON_LEFT);
				//bool Right = IsMouseButtonPressed(MouseButton.MOUSE_BUTTON_RIGHT);
			}

			CloseWindow();
		}

		static void Draw() {
			int MassCount = 400;
			float MassStep = Grid.AxisSize.Y / MassCount;

			Grid.BeginLine(false);

			for (int i = 0; i < MassCount; i++) {
				float FuelMass = i * MassStep;

				float MS = CalcPWFord(FuelMass, out float MSIdeal);

				Grid.PlotPixel(new Vector2(MSIdeal, FuelMass), Color.GRAY);
				Grid.PlotLinePoint(new Vector2(MS, FuelMass));
			}

			Grid.EndLine(1, Color.BLUE);

			//---


			Grid.BeginLine(false);

			for (int i = 0; i < MassCount; i++) {
				float FuelMass = i * MassStep;

				float MS2 = CalcPW(FuelMass, out float MSIdeal2);

				Grid.PlotPixel(new Vector2(MSIdeal2, FuelMass), Color.RED);
				Grid.PlotLinePoint(new Vector2(MS2, FuelMass));
			}

			Grid.EndLine(1, Color.ORANGE);
		}

		static ECUMap Map_OffsetPressIGNV;
		static ECUMap Map_FlowRateMultVsIAT;
		static ECUMap Map_ShortPulseAdder;

		static ECUMap Map_FlowRateLowMultVsPressure;
		static ECUMap Map_FlowRateHighMultVsPressure;
		static ECUMap Map_BreakpointMult;
		static ECUMap Map_Offset;
		static ECUMap Map_OffsetMult;

		static float CalcPW(float AirMass, float AFR, out float PWIdeal) {
			return CalcPW(AirMass / AFR, out PWIdeal);
		}

		const float IAT = 22.0f;
		const float BatteryVoltage = 14;

		static float CalcPWFord(float FuelMass, out float PWIdeal) {
			float RailFuelPressure = 269; // kPa

			float PressureDropRef = 269.9f; // kPa
			float FlowRateLow = 7.218016f; // g/s
			float FlowRateHigh = 6.122136f; // g/s
			float Breakpoint = 0.00655f; // g


			float BreakpointMult = Map_BreakpointMult.Index(0, RailFuelPressure);
			float LowMult = Map_FlowRateLowMultVsPressure.Index(0, RailFuelPressure);
			float HighMult = Map_FlowRateHighMultVsPressure.Index(0, RailFuelPressure);


			float Offset = Map_Offset.Index(0, BatteryVoltage);
			float OffsetMult = Map_OffsetMult.Index(0, PressureDropRef);

			float CalcBreakpoint = Breakpoint * BreakpointMult;
			float CurrentFlowRate = 0;

			if (FuelMass > CalcBreakpoint)
				CurrentFlowRate = FlowRateHigh * HighMult;
			else
				CurrentFlowRate = FlowRateLow * LowMult;

			// Ideal pulse width?
			PWIdeal = FuelMass / (FlowRateHigh * HighMult) * 1000;

			float IGNV = (Offset * OffsetMult);
			float PWCur = FuelMass / CurrentFlowRate * 1000 + IGNV;

			float ShortPulseAdder = PWCur - PWIdeal;


			/*if (PWIdeal >= 0 && PWIdeal <= 4f) {
				Console.WriteLine("{0} - {1}", ShortPulseAdder, PWIdeal);
			} else if (PWIdeal > 4)
				Console.WriteLine("Done!");*/


			return PWCur;
		}

		static float CalcPW(float FuelMass, out float PWIdeal) {
			float ShortPulseLimit = 126.500f;
			float StaticFlowRate = 3.96826171875f; // 6.2998046875f; // g/s


			//float OffsetPressIGNV = Map_OffsetPressIGNV.Index(0, BatteryVoltage);
			float OffsetPressIGNV = 0;


			float FlowRateMultVsIAT = Map_FlowRateMultVsIAT.Index(IAT, 0);

			float FlowRate = StaticFlowRate * FlowRateMultVsIAT;

			float MS = FuelMass / FlowRate * 1000;
			PWIdeal = FuelMass / StaticFlowRate * 1000;

			float ShortPulseAdder = 0;

			if (MS < ShortPulseLimit)
				ShortPulseAdder = Map_ShortPulseAdder.Index(MS, 0);

			return MS + ShortPulseAdder + OffsetPressIGNV;

		}
		static void LoadData() {
			Map_OffsetPressIGNV = new ECUMap(@"
ms	128	148	168	188	208	228	248	268	288	308	328	348	368	388	408	428	448	468	488	508	528	548	568	588	608	628	648	668	688	708	728	748	768	kPa
4	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875	13.96875
5	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375	12.7109375
6	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125	7.203125
7	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375	2.8984375
8	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375	1.984375
9	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125	1.53125
10	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875	1.2421875
11	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125	1.03125
12	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375	0.859375
13	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625	0.7265625
14	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875	0.6171875
15	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625	0.515625
16	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375	0.4375
17	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375	0.375
18	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125	0.3125
19	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875	0.2421875
20	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625	0.2265625
V
");

			Map_FlowRateMultVsIAT = new ECUMap(@"
	-40	-30	-20	-10	0	10	20	30	40	50	60	70	80	90	100	110	120	°C
Multiplier	1.030029296875	1.0206298828125	1.01129150390625	1.00189208984375	0.9925537109375	0.983154296875	0.9737548828125	0.96441650390625	0.95501708984375	0.94561767578125	0.936279296875	0.9268798828125	0.91754150390625	0.90814208984375	0.89874267578125	0.889404296875	0.8800048828125
");

			Map_ShortPulseAdder = new ECUMap(@"
ms	0	0.125	0.25	0.375	0.5	0.625	0.75	0.875	1	1.125	1.25	1.375	1.5	1.625	1.75	1.875	2	2.125	2.25	2.375	2.5	2.625	2.75	2.875	3	3.125	3.25	3.375	3.5	3.625	3.75	3.875	4	
PulseWidthAdder	0	5.75	4.375	3.125	1.875	1.125	0.625	0.25	0.125	0	-0.125	-0.125	-0.25	-0.25	-0.25	-0.25	-0.25	-0.25	-0.25	-0.25	-0.25	-0.125	-0.125	-0.125	-0.125	-0.125	-0.125	-0.125	-0.125	-0.125	-0.125	-0.125	0
");



			//-- Ford

			Map_FlowRateLowMultVsPressure = new ECUMap(@"
x	0	x
137.89514	0.714999973773956
206.84271	0.875999987125397
269.998683067944	1
345.013646592339	1.13039994239807
414.030152589718	1.23829996585846
482.977748891129	1.33700001239777
kPa
");

			Map_FlowRateHighMultVsPressure = new ECUMap(@"
x	0	x
137.89514	0.714999973773956
206.84271	0.875999987125397
269.998683067944	1
345.013646592339	1.13719999790192
414.030152589718	1.25039994716644
482.977748891129	1.33700001239777
kPa
");

			Map_BreakpointMult = new ECUMap(@"	
x	0	x
137.89514	0.714999973773956
206.84271	0.875999987125397
269.998683067944	1
345.013646592339	1.02079999446869
414.030152589718	1.21539998054504
482.977748891129	1.33700001239777
kPa
");

			Map_Offset = new ECUMap(@"
x	0	x
6	5.20200002938509
7	3.31578915938735
8	2.18400009907782
9	1.77067669574171
10	1.43499998375773
11	1.21000001672655
12	1.04100001044571
13	0.906999979633838
13.5	0.834586448036134
14	0.789000012446195
15	0.699000025633723
15.8999996185303	0.58646616525948
V
");

			Map_OffsetMult = new ECUMap(@"
x	0	x
137.89514	0.884999990463257
206.84271	0.944999992847443
269.999787727192	1
344.73785	1.2039999961853
413.68542	1.16380000114441
482.63299	1.18599998950958
482.63299	1.18599998950958
kPa
");
		}
	}
}